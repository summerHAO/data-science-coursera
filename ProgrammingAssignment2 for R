## this function is used to create a special "matrix" object that can cache its inverse
makeCacheMatrix33 <- function(x=matrix()){
  invMatrix<- NULL
  set <- function(y){
    x<<- y
    invMatrix<<- NULL
  }
  get <- function() x
  setInverse <- function(inverse) invMatrix <<- inverse
  getInverse <- function() invMatrix
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

## this function is help to compute the inverse of the sepical "matrix" returned by makeCacheMatrix above
cacheSolve33 <- function(x,...){
##return a matrix that is the inverse of "x" 
  invMatrix <- x$getInverse()
## test whether the matrix is a invertible matrix
  if (!is.null(invMatrix)) {
    message("getting cached data")
    return(invMatrix)
  }
## make a new matrix to inverse
  newMatrix <- x$get()
  invMatrix <- solve(newMatrix, ...)
  x$setInverse(invMatrix)
  
}
